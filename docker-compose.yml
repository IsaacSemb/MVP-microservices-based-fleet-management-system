version: "3.9"

services:
  # 1. MySQL Database
  mysql:
    image: mysql:8.0
    container_name: mysql
    environment:
      MYSQL_ROOT_PASSWORD: 1234
      # MYSQL_DATABASE: driver_management # defalut database
    ports:
      - "3306:3306"
    healthcheck: # Ensures MySQL is fully ready
      test:
        ["CMD", "mysqladmin", "ping", "-h", "localhost", "-u", "root", "-p1234"]
      interval: 10s
      retries: 5
      timeout: 5s
    volumes:
      - mysql_data:/var/lib/mysql
      - ./db_creator:/docker-entrypoint-initdb.d
    networks:
      - app_network

  # 2. phpMyAdmin GUI
  phpmyadmin:
    image: phpmyadmin:latest
    container_name: phpmyadmin
    environment:
      PMA_HOST: mysql
      PMA_PORT: 3306
      PMA_USER: root
      PMA_PASSWORD: 1234
    ports:
      - "8080:80" # Accessible at http://localhost:8080
    depends_on:
      mysql:
        condition: service_healthy
    networks:
      - app_network

  # 3. RabbitMQ Broker
  rabbitmq:
    image: rabbitmq:3-management
    container_name: rabbitmq
    environment:
      RABBITMQ_DEFAULT_USER: guest
      RABBITMQ_DEFAULT_PASS: guest
    ports:
      - "5672:5672" # AMQP port
      - "15672:15672" # Management UI: http://localhost:15672
    networks:
      - app_network

  # 4. Service 1 - Driver Management
  service1_driver_management:
    build:
      context: .
      dockerfile: ./services/service1_driver_management/Dockerfile
    container_name: service1_driver_management
    ports:
      - "5001:5001"
    env_file:
      - .env.docker
    environment:
      SERVICE_1_DB_NAME: driver_management # ${SERVICE_1_DB_NAME}
    volumes:
      - ./services/service1_driver_management:/app/services/service1_driver_management # Mount local code to container
      - ./common:/app/common # Mount the shared 'common' folder
    depends_on:
      mysql:
        condition: service_healthy
      rabbitmq:
        condition: service_started
    networks:
      - app_network

  # Additional services: Service 2 to Service 7
  service2_vehicle_management:
    build:
      context: .
      dockerfile: ./services/service2_vehicle_management/Dockerfile
    container_name: service2_vehicle_management
    ports:
      - "5002:5002"
    env_file:
      - .env.docker
    environment:
      SERVICE_2_DB_NAME: vehicle_management # ${SERVICE_2_DB_NAME}
    volumes:
      - ./services/service2_vehicle_management:/app/services/service2_vehicle_management
      - ./common:/app/common
    depends_on:
      mysql:
        condition: service_healthy
      rabbitmq:
        condition: service_started
    networks:
      - app_network
  service3_assignments:
    build:
      context: .
      dockerfile: ./services/service3_assignments/Dockerfile
    container_name: service3_assignments
    ports:
      - "5003:5003"
    env_file:
      - .env.docker
    environment:
      SERVICE_3_DB_NAME: assignments # ${SERVICE_3_DB_NAME}
    volumes:
      - ./services/service3_assignments:/app/services/service3_assignments
      - ./common:/app/common
    depends_on:
      mysql:
        condition: service_healthy
      rabbitmq:
        condition: service_started
    networks:
      - app_network

  service4_maintenance_repairs:
    build:
      context: .
      dockerfile: ./services/service4_maintenance_repairs/Dockerfile
    container_name: service4_maintenance_repairs
    ports:
      - "5004:5004"
    env_file:
      - .env.docker
    environment:
      SERVICE_4_DB_NAME: maintenance # this is weird, you cant pull it from env and i dont know whyyyyyyyy ${SERVICE_4_DB_NAME}  -- doesnt work

    volumes:
      - ./services/service4_maintenance_repairs:/app/services/service4_maintenance_repairs
      - ./common:/app/common
    depends_on:
      mysql:
        condition: service_healthy
      rabbitmq:
        condition: service_started
    networks:
      - app_network

  service5_scheduling:
    build:
      context: .
      dockerfile: ./services/service5_scheduling/Dockerfile
    container_name: service5_scheduling
    ports:
      - "5005:5005"
    env_file:
      - .env.docker
    environment:
      SERVICE_5_DB_NAME: schedules # ${SERVICE_5_DB_NAME}
    volumes:
      - ./services/service5_scheduling:/app/services/service5_scheduling
      - ./common:/app/common
    depends_on:
      mysql:
        condition: service_healthy
      rabbitmq:
        condition: service_started
    networks:
      - app_network

  service6_fuel_consumption_service:
    build:
      context: .
      dockerfile: ./services/service6_fuel_consumption_service/Dockerfile
    container_name: service6_fuel_consumption_service
    ports:
      - "5006:5006"
    env_file:
      - .env.docker
    environment:
      SERVICE_6_DB_NAME: fuel_consumption # ${SERVICE_6_DB_NAME}
    volumes:
      - ./services/service6_fuel_consumption_service:/app/services/service6_fuel_consumption_service
      - ./common:/app/common
    depends_on:
      mysql:
        condition: service_healthy
      rabbitmq:
        condition: service_started
    networks:
      - app_network

  service7_tasks_services:
    build:
      context: .
      dockerfile: ./services/service7_tasks_services/Dockerfile
    container_name: service7_tasks_services
    ports:
      - "5007:5007"
    env_file:
      - .env.docker
    environment:
      SERVICE_7_DB_NAME: tasks # ${SERVICE_7_DB_NAME}
    volumes:
      - ./services/service7_tasks_services:/app/services/service7_tasks_services
      - ./common:/app/common
    depends_on:
      mysql:
        condition: service_healthy
      rabbitmq:
        condition: service_started
    networks:
      - app_network
  service8_documentation_service:
    build:
      context: .
      dockerfile: ./services/service8_documentation_service/Dockerfile
    container_name: sevice8_documentation_service
    ports:
      - "8000:8000"
    env_file:
      - .env.docker
    # environment:
    # SERVICE_7_DB_NAME: ${SERVICE_7_DB_NAME}
    volumes:
      - ./services/service8_documentation_service/static:/app/services/service8_documentation_service/static # Mount the static folder
      - ./common:/app/common
    depends_on:
      mysql:
        condition: service_healthy
      rabbitmq:
        condition: service_started
    networks:
      - app_network

networks:
  app_network:
    driver: bridge

volumes:
  mysql_data:
    driver: local
